from numpy import *

class Point:
    """Encodes a point in space, and provides methods for displacing it.
    Uses numpy arrays, not Python lists, where applicable."""
    
    def __init__(self, x,y,z):
        self.r= array([x,y,z]); # position r
        
    def rotate(self, v, A, theta):
        """Rotates about axis by amount theta.
        The axis is given by direction v and point A."""
        # Strategy: find two unit vectors, a and b, forming orthogonal axes
        # whose plane contains both the original and the rotated point
        
        # First find the point C = (C1, C2, C3) on the axis and at the center
        # of the cirle generated by rotating the point from theta = 0 to 2pi.
        # This consists of solving two vector equations:
        # (1) a is perpendicular to the axis: Cr.v = 0
        # (2) C lies on the axis: C = A + tv for some t
        
        C1= (v[0]*dot(r,v) + A[0]*(v[1]**2+v[2]**2) - v[0]*(A[1]v[1]+A[2]v[2]))/dot(v,v);
        C2= A[1] + (C1 - A[0])*v[1]/v[0];
        C3= A[2] + (C1 - A[0])*v[2]/v[0];
        C= array([C1, C2, C3]);
        
        # Now assign a value to the unit vector a pointing from the axis toward the point
        rad= linalg.norm(r-c); # MAGNITUDE OF vector from C to r; in other words,
                                # the radius of the circle described above
        a= (r-C)/rad;
        # Now assign a value to the unit vector b as specified above
        b= cross(v/lingalg.norm(v),a);
        
        # Finally, use the information above to rotate the point
        self.r= rad*cos(theta)*a + rad*sin(theta)*b;
        
    def translateAxis(self, v, amount):
        """Translates along the axis with direction given by v."""
        
    def translateXYZ(self, disp):
        """Translates in xyz-coordinates by amounts given in numpy array disp."""
        
class PointMass:
    """Encodes a point mass in space."""
    def __init__(self, point, mass):
        self.p= point; self.m= mass;
        
class RigidBody:
    """Encodes a rigid body, composed of discrete point masses."""